{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\n\n\n// MAIN //\n\n/**\n* Calculates the Levenshtein (edit) distance between two strings.\n*\n* @param {string} s1 - first string value\n* @param {string} s2 - second string value\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a string\n* @returns {number} Levenshtein distance\n*\n* @example\n* var distance = levenshteinDistance( 'algorithm', 'altruistic' );\n* // returns 6.0\n*/\nfunction levenshteinDistance( s1, s2 ) {\n\tvar temp;\n\tvar row;\n\tvar pre;\n\tvar m;\n\tvar n;\n\tvar i;\n\tvar j;\n\n\tif ( !isString( s1 ) ) {\n\t\tthrow new TypeError( format( 'null3N', s1 ) );\n\t}\n\tif ( !isString( s2 ) ) {\n\t\tthrow new TypeError( format( 'null3N', s2 ) );\n\t}\n\n\tn = s1.length;\n\tm = s2.length;\n\trow = [];\n\n\t// If either of the strings is empty, insert the characters:\n\tif ( n === 0 || m === 0 ) {\n\t\treturn max( m, n );\n\t}\n\n\tfor ( i = 0; i <= m; i++ ) {\n\t\trow[i] = i;\n\t}\n\n\tfor ( i = 0; i <= n - 1; i++ ) {\n\t\tpre = row[ 0 ];\n\t\trow[ 0 ] = i + 1;\n\t\tfor ( j = 0; j <= m - 1; j++ ) {\n\t\t\ttemp = row[ j + 1 ];\n\t\t\tif ( s1[ i ] === s2[ j ] ) {\n\t\t\t\trow[ j + 1 ] = pre;\n\t\t\t} else {\n\t\t\t\trow[ j + 1 ] = min( pre, min( row[ j ], row[ j + 1 ] ) ) + 1;\n\t\t\t}\n\t\t\tpre = temp;\n\t\t}\n\t}\n\treturn row[ m ];\n}\n\n\n// EXPORTS //\n\nexport default levenshteinDistance;\n"],"names":["levenshteinDistance","s1","s2","temp","row","pre","m","n","i","j","isString","TypeError","format","length","max","min"],"mappings":";;sXA2CA,SAASA,EAAqBC,EAAIC,GACjC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUT,GACf,MAAM,IAAIU,UAAWC,EAAQ,SAAUX,IAExC,IAAMS,EAAUR,GACf,MAAM,IAAIS,UAAWC,EAAQ,SAAUV,IAQxC,GALAK,EAAIN,EAAGY,OACPP,EAAIJ,EAAGW,OACPT,EAAM,GAGK,IAANG,GAAiB,IAAND,EACf,OAAOQ,EAAKR,EAAGC,GAGhB,IAAMC,EAAI,EAAGA,GAAKF,EAAGE,IACpBJ,EAAII,GAAKA,EAGV,IAAMA,EAAI,EAAGA,GAAKD,EAAI,EAAGC,IAGxB,IAFAH,EAAMD,EAAK,GACXA,EAAK,GAAMI,EAAI,EACTC,EAAI,EAAGA,GAAKH,EAAI,EAAGG,IACxBN,EAAOC,EAAKK,EAAI,GACXR,EAAIO,KAAQN,EAAIO,GACpBL,EAAKK,EAAI,GAAMJ,EAEfD,EAAKK,EAAI,GAAMM,EAAKV,EAAKU,EAAKX,EAAKK,GAAKL,EAAKK,EAAI,KAAU,EAE5DJ,EAAMF,EAGR,OAAOC,EAAKE,EACb"}