{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport min from '@stdlib/math-base-special-min';\n\n\n// MAIN //\n\n/**\n* Calculates the Levenshtein (edit) distance between two strings.\n*\n* @param {string} s1 - first string value\n* @param {string} s2 - second string value\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a string\n* @returns {NonNegativeInteger} Levenshtein distance\n*\n* @example\n* var distance = levenshteinDistance( 'algorithm', 'altruistic' );\n* // returns 6\n*/\nfunction levenshteinDistance( s1, s2 ) {\n\tvar temp;\n\tvar row;\n\tvar pre;\n\tvar m;\n\tvar n;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isString( s1 ) ) {\n\t\tthrow new TypeError( format( '1fl3F,Ex', s1 ) );\n\t}\n\tif ( !isString( s2 ) ) {\n\t\tthrow new TypeError( format( '1fl39,Ey', s2 ) );\n\t}\n\tn = s1.length;\n\tm = s2.length;\n\n\t// If either string is empty, the edit distance is equal to the number of characters in the non-empty string...\n\tif ( n === 0 ) {\n\t\treturn m;\n\t}\n\tif ( m === 0 ) {\n\t\treturn n;\n\t}\n\n\trow = [];\n\tfor ( i = 0; i <= m; i++ ) {\n\t\trow.push( i );\n\t}\n\n\tfor ( i = 0; i < n; i++ ) {\n\t\tpre = row[ 0 ];\n\t\trow[ 0 ] = i + 1;\n\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\tk = j + 1;\n\t\t\ttemp = row[ k ];\n\t\t\tif ( s1[ i ] === s2[ j ] ) {\n\t\t\t\trow[ k ] = pre;\n\t\t\t} else {\n\t\t\t\trow[ k ] = min( pre, min( row[ j ], row[ k ] ) ) + 1;\n\t\t\t}\n\t\t\tpre = temp;\n\t\t}\n\t}\n\treturn row[ m ];\n}\n\n\n// EXPORTS //\n\nexport default levenshteinDistance;\n"],"names":["levenshteinDistance","s1","s2","temp","row","pre","m","n","i","j","k","isString","TypeError","format","length","push","min"],"mappings":";;oSA0CA,SAASA,EAAqBC,EAAIC,GACjC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUV,GACf,MAAM,IAAIW,UAAWC,EAAQ,WAAYZ,IAE1C,IAAMU,EAAUT,GACf,MAAM,IAAIU,UAAWC,EAAQ,WAAYX,IAM1C,GAJAK,EAAIN,EAAGa,OACPR,EAAIJ,EAAGY,OAGI,IAANP,EACJ,OAAOD,EAER,GAAW,IAANA,EACJ,OAAOC,EAIR,IADAH,EAAM,GACAI,EAAI,EAAGA,GAAKF,EAAGE,IACpBJ,EAAIW,KAAMP,GAGX,IAAMA,EAAI,EAAGA,EAAID,EAAGC,IAGnB,IAFAH,EAAMD,EAAK,GACXA,EAAK,GAAMI,EAAI,EACTC,EAAI,EAAGA,EAAIH,EAAGG,IAEnBN,EAAOC,EADPM,EAAID,EAAI,GAEHR,EAAIO,KAAQN,EAAIO,GACpBL,EAAKM,GAAML,EAEXD,EAAKM,GAAMM,EAAKX,EAAKW,EAAKZ,EAAKK,GAAKL,EAAKM,KAAU,EAEpDL,EAAMF,EAGR,OAAOC,EAAKE,EACb"}